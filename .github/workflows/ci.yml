name: CI

on: [push, pull_request]

jobs:
  build:
    name: Build

    runs-on: ubuntu-latest

    steps:
      - name: Checkout git repository
        uses: actions/checkout@v3
      - name: Get yarn cache
        id: yarn-cache
        run: echo "::set-output name=dir::$(yarn config get cacheFolder)"
      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install dependencies with Yarn
        run: yarn install --immutable
        env:
          POSTGRES_URI: ${{ secrets.POSTGRES_URI }}
      - name: Compile TypeScript
        run: yarn run build
      - name: Upload compiled TypeScript
        uses: actions/upload-artifact@v2
        with:
          name: tsc_output
          path: tsc_output
  lint:
    name: Lint source

    runs-on: ubuntu-latest

    steps:
      - name: Checkout git repository
        uses: actions/checkout@v3
      - name: Get yarn cache
        id: yarn-cache
        run: echo "::set-output name=dir::$(yarn config get cacheFolder)"
      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install dependencies with Yarn
        run: yarn install --immutable
        env:
          POSTGRES_URI: ${{ secrets.POSTGRES_URI }}
      - name: Lint with XO
        run: yarn run xo
  unit-test:
    name: Unit tests

    runs-on: ubuntu-latest

    steps:
      - name: Checkout git repository
        uses: actions/checkout@v3
      - name: Get yarn cache
        id: yarn-cache
        run: echo "::set-output name=dir::$(yarn config get cacheFolder)"
      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install dependencies with Yarn
        run: yarn install --immutable
        env:
          POSTGRES_URI: ${{ secrets.POSTGRES_URI }}
      - name: Run tests
        run: yarn test --coverage
      - name: Upload coverage
        uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true
  lint-dockerfile:
    name: Lint Dockerfile

    runs-on: ubuntu-latest

    steps:
      - name: Checkout git repository
        uses: actions/checkout@v3
      - name: Lint Dockerfile
        uses: brpaz/hadolint-action@v1.5.0
        with:
          dockerfile: 'Dockerfile'
  style:
    name: Check style

    runs-on: ubuntu-latest

    steps:
      - name: Checkout git repository
        uses: actions/checkout@v3
      - name: Get yarn cache
        id: yarn-cache
        run: echo "::set-output name=dir::$(yarn config get cacheFolder)"
      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install dependencies with Yarn
        run: yarn install --immutable
        env:
          POSTGRES_URI: ${{ secrets.POSTGRES_URI }}
      - name: Check style with Prettier
        run: yarn run style
  style-prisma:
    name: Check style of Prisma schema

    runs-on: ubuntu-latest

    steps:
      - name: Checkout git repository
        uses: actions/checkout@v3
      - name: Get yarn cache
        id: yarn-cache
        run: echo "::set-output name=dir::$(yarn config get cacheFolder)"
      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install dependencies with Yarn
        run: yarn install --immutable
        env:
          POSTGRES_URI: ${{ secrets.POSTGRES_URI }}
      - name: Check style with Prisma CLI
        run: yarn run prisma format && git diff --exit-code -s schema.prisma
  deploy:
    name: Deploy

    runs-on: ubuntu-latest

    # Don't run this job if we aren't on master branch
    # `semantic-release` will do this automatically, but this saves us the time of building the image prior to that
    if: ${{ github.ref  == 'refs/heads/master' }}

    needs: [build, lint, lint-dockerfile, e2e-test, unit-test]

    steps:
      - name: Checkout git repository
        uses: actions/checkout@v3
      - name: Get yarn cache
        id: yarn-cache
        run: echo "::set-output name=dir::$(yarn config get cacheFolder)"
      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install dependencies with Yarn
        run: yarn install --immutable
        env:
          POSTGRES_URI: ${{ secrets.POSTGRES_URI }}
      - name: Deploy
        run: yarn run deploy
        env:
          DOCKER_USERNAME: dicediscordbot
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # Sentry release semantic-release plugin
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_PROJECT: bot
          SENTRY_ORG: dice
  e2e-test:
    name: E2E test

    runs-on: ubuntu-latest

    timeout-minutes: 6

    if: ${{ github.ref  == 'refs/heads/master' }}

    steps:
      - name: Checkout git repository
        uses: actions/checkout@v3
      - name: Get yarn cache
        id: yarn-cache
        run: echo "::set-output name=dir::$(yarn config get cacheFolder)"
      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install dependencies with Yarn
        run: yarn install --immutable
        env:
          POSTGRES_URI: ${{ secrets.POSTGRES_URI }}
      - name: Compile TypeScript
        run: yarn run build
      - name: Start lite client
        run: node tsc_output/src/lite.js
        env:
          POSTGRES_URI: ${{ secrets.POSTGRES_URI }}
          DISCORD_TOKEN: ${{ secrets.DISCORD_TOKEN }}
          SQREEN_TOKEN: ${{ secrets.SQREEN_TOKEN }}
          SQREEN_APP_NAME: Dice
          NODE_ENV: development
