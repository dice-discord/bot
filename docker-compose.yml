version: '3.7'
networks:
  backend:
    driver: bridge
    name: backend
  frontend:
    driver: bridge
    name: frontend
services:
  # The Discord bot
  bot:
    image: dicediscord/bot
    restart: unless-stopped
    env_file: bot.env
    expose:
      - '5000'
    links:
      - postgres
      - influxdb
    networks:
      - backend
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.bot.rule=Host(`dice.jonah.pw`) && Path(`/bot`) || PathPrefix(`/bot/`)'
      - 'traefik.http.routers.bot.entrypoints=web'
      - 'traefik.http.services.bot.loadbalancer.server.port=5000'
    volumes:
      - ./googleCloudServiceAccount.json:/usr/src/dice/googleCloudServiceAccount.json:ro
  postgres:
    image: postgres:13.4-alpine
    restart: unless-stopped
    volumes:
      - dice-postgres-storage:/var/lib/postgresql/data
    networks:
      - backend
    env_file: postgres.env
    ports:
      - '5432:5432'
  # Autoupdate images
  watchtower:
    image: v2tec/watchtower
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - backend
  # Grafana dashboards
  grafana:
    image: grafana/grafana
    restart: unless-stopped
    env_file: grafana.env
    volumes:
      - dice-grafana-storage:/var/lib/grafana
    networks:
      - frontend
      - backend
    expose:
      - '3000'
    links:
      - influxdb
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.grafana.rule=Path(`/grafana`) || PathPrefix(`/grafana/`)'
      - 'traefik.http.routers.grafana.entrypoints=web'
      - 'traefik.http.services.grafana.loadbalancer.server.port=3000'
  # InfluxDB time-series database
  influxdb:
    image: influxdb:1.8.10-alpine
    restart: unless-stopped
    env_file: influxdb.env
    expose:
      - '8086'
    volumes:
      - dice-influxdb-storage:/var/lib/influxdb
    networks:
      - backend
  # Reverse proxy and load balancer
  traefik:
    image: traefik:v2.5.4
    restart: unless-stopped
    ports:
      - '80:80'
      - '8080:8080'
      - '443:443'
    volumes:
      - '/var/run/docker.sock:/var/run/docker.sock:ro'
      - './acme:/acme'
    command:
      [
        '--api.insecure=true',
        '--api.dashboard=true',
        '--providers.docker=true',
        '--providers.docker.exposedbydefault=false',
        '--entrypoints.web.address=:80',
        '--entrypoints.websecure.address=:443'
      ]
    networks:
      - frontend
      - backend
  telegraf:
    image: telegraf:1.20.3-alpine
    restart: unless-stopped
    env_file: telegraf.env
    environment:
      - HOST_PROC=/host/proc
    expose:
      # StatsD
      - '8125'
      # UDP
      - '8092'
      # TCP
      - '8094'
    volumes:
      - '/proc:/host/proc:ro'
      - /var/run/docker.sock:/var/run/docker.sock
      - './telegraf.conf:/etc/telegraf/telegraf.conf:ro'
    links:
      - postgres
      - influxdb
    networks:
      - backend
  metabase:
    image: metabase/metabase
    restart: unless-stopped
    env_file: metabase.env
    networks:
      - frontend
      - backend
    ports:
      - '3001:3000'
    links:
      - postgres
volumes:
  dice-grafana-storage:
    external: true
  dice-influxdb-storage:
    external: true
  dice-postgres-storage:
    external: true
